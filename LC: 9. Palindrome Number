LC: 9. Palindrome Number

Given an integer x, return true if x is a palindrome, and false otherwise.

 

Example 1:

Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:

Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:

Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.
 

Constraints:

-231 <= x <= 231 - 1

## Solution:

class Solution:
    def isPalindrome(self, x: int) -> bool:
        return str(x)==str(x)[::-1]

## Follow up: Could you solve it without converting the integer to a string?

class Solution:
    def isPalindrome(self, x: int) -> bool:
        ##return str(x)==str(x)[::-1]
        if x<0 or (x!=0 and x%10==0):
            return False
        
        second_half= 0
        while x> second_half: # eg: x= 12321 (x=12)
            second_half= second_half*10+ x%10 # x%10 -> 1(gives last 1 digit).. second_half=123
            x//=10 # x becomes 1232... x=12 < 123 (loop stops)
        
        return x==second_half or x== second_half//10
        # 12 == 123? or 12 == 123//10 -> 12 (disregarding the middle 3 val)

        
        
        
