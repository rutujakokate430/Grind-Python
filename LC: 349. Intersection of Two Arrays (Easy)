LC: 349. Intersection of Two Arrays (Easy)

Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000

class Solution:
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        set1= set(nums1)  #O(N)
        res= set()
        for num in nums2: # O(M), m= len of nums2
            if num in set1:  ## Look up 0(1)
                res.add(num) ## add (on avg- O(1))
        return list(res)  # o(K)- K- LEN OF RES

## We converted nums1 to set because lookup for set is O(1) where lookup in lists is expensive. i.e O(N)

## Time Complexity: O(m+n), k< m, m so we can ignore k for worst case TC
## SPACE complexity: O(N), we created set, list(res) o(m)- store min - m, n
### SC: O(n+ min(m, n))
